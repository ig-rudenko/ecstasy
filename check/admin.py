"""

## –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º, —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ

–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é, –≥—Ä—É–ø–ø

–¢–∞–∫–∂–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—Ä–æ–≤–Ω–µ–º –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π

–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π

–¢–∞–∫–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

# pylint: disable=maybe-no-member
import zipfile
from datetime import datetime

import orjson
from django import forms
from django.conf import settings
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.contrib.auth.models import User
from django.db.models import QuerySet, Count
from django.http import HttpResponse
from django.utils.html import format_html, escape
from django.utils.safestring import mark_safe
from import_export.admin import ExportMixin

from devicemanager.device import Interfaces
from gathering.services.configurations import LocalConfigStorage
from .export import DevicesInterfacesWorkloadExcelExport
from .export_resources import DevicesResource
from .models import (
    DeviceGroup,
    Devices,
    AuthGroup,
    Bras,
    Profile,
    UsersActions,
    DeviceMedia,
    DeviceCommand,
)


class ProfileInline(admin.TabularInline):
    model = Profile.devices_groups.through


@admin.register(DeviceGroup)
class DeviceGroupAdmin(admin.ModelAdmin):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""

    list_display = ["name", "description", "dev_count"]
    inlines = [ProfileInline]

    def get_queryset(self, request):
        return super().get_queryset(request).annotate(dev_count=Count("devices"))

    @admin.display(description="–ö–æ–ª-–≤–æ")
    def dev_count(self, obj) -> int:
        return obj.dev_count


@admin.register(Devices)
class DevicesAdmin(ExportMixin, admin.ModelAdmin):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º"""

    resource_class = DevicesResource

    list_display = [
        "show_ip_address",
        "show_name",
        "show_vendor",
        "show_model",
        "show_group",
        "show_auth_group",
        "show_auth_type",
        "show_device",
    ]
    list_filter = [
        "vendor",
        "group",
        "auth_group",
        "model",
        "port_scan_protocol",
        "cmd_protocol",
        "connection_pool_size",
        "active",
    ]
    radio_fields = {
        "port_scan_protocol": admin.HORIZONTAL,
        "cmd_protocol": admin.HORIZONTAL,
    }
    readonly_fields = ["show_interfaces"]
    search_fields = ["ip", "name"]
    list_select_related = ["auth_group", "group"]
    list_per_page = 50

    fieldsets = (
        (
            "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞",
            {"fields": ("ip", "name", "active"), "classes": ("wide",)},
        ),
        (
            "–¢–∏–ø",
            {"fields": ("vendor", "model", "serial_number", "os_version")},
        ),
        (
            "–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å",
            {"fields": ("group", "auth_group")},
        ),
        (
            "–£–¥–∞–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
            {
                "fields": (
                    "snmp_community",
                    "port_scan_protocol",
                    "cmd_protocol",
                    "collect_interfaces",
                    "collect_mac_addresses",
                    "collect_vlan_info",
                    "collect_configurations",
                    "connection_pool_size",
                )
            },
        ),
        (
            "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã",
            {"fields": ("interface_pattern", "show_interfaces")},
        ),
    )
    actions = [
        "activate_devices",
        "deactivate_devices",
        "excel_interfaces_export",
        "load_last_config_files",
        "set_telnet_port_scan_protocol",
        "set_snmp_port_scan_protocol",
        "set_ssh_port_scan_protocol",
        "set_telnet_cmd_protocol",
        "set_ssh_cmd_protocol",
        "set_pool_size_1",
        "set_pool_size_2",
        "set_pool_size_3",
        "set_pool_size_4",
    ]

    @admin.display(description="IP-–∞–¥—Ä–µ—Å")
    def show_ip_address(self, obj: Devices):
        active = "" if obj.active else "‚ùå"
        return mark_safe(f"""<span style="font-family: monospace;">{active} {obj.ip}</span>""")

    @admin.display(description="–ù–∞–∑–≤–∞–Ω–∏–µ")
    def show_name(self, obj: Devices):
        return mark_safe(f"""<span style="font-family: monospace;">{obj.name}</span>""")

    @admin.display(description="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å")
    def show_vendor(self, obj: Devices):
        return mark_safe(f"""<span style="font-family: monospace;">{obj.vendor}</span>""")

    @admin.display(description="–ú–æ–¥–µ–ª—å")
    def show_model(self, obj: Devices):
        return mark_safe(f"""<span style="font-family: monospace;">{obj.model}</span>""")

    @admin.display(description="–ì—Ä—É–ø–ø–∞")
    def show_group(self, obj: Devices):
        return mark_safe(
            f"""<span style="font-family: monospace;">{obj.group.name}</span>"""
        )

    @admin.display(description="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    def show_auth_group(self, obj: Devices):
        return mark_safe(
            f"""<span style="font-family: monospace;">{obj.auth_group.name}</span>"""
        )

    @admin.display(description="")
    def show_auth_type(self, obj: Devices):
        text = ""
        if obj.port_scan_protocol == "telnet":
            text += """<span title="telnet">üîì</span>"""
        elif obj.port_scan_protocol == "ssh":
            text += """<span title="ssh" style="font-size: 1.3rem">üîê</span>"""
        elif obj.port_scan_protocol == "snmp":
            text += """<span style="color: green;font-family: fantasy;">SNMP</span>"""

        if obj.cmd_protocol != obj.port_scan_protocol:
            if obj.cmd_protocol == "telnet":
                text += """<span title="telnet">üîì</span>"""
            elif obj.cmd_protocol == "ssh":
                text += """<span title="ssh" style="font-size: 1.3rem">üîê</span>"""

        return mark_safe(text)

    @admin.display(description="–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã")
    def show_interfaces(self, obj: Devices):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—á–∫—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        interfaces = (
            str(Interfaces(orjson.loads(obj.devicesinfo.interfaces or "[]")))
            .replace("\n", "<br>")
            .replace(" ", "&nbsp;")
        )
        return format_html(
            f"""
            <div style"overflow-x: scroll;">
                <div style="font-family: monospace; white-space: nowrap;">
                    {interfaces}
                </div>
            </div>"""
        )

    @admin.display(description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
    def show_device(self, obj: Devices):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""

        return mark_safe(
            f"""<a target="_blank" href="{obj.get_absolute_url()}">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" 
                class="bi bi-box-arrow-in-right" viewBox="0 0 16 16">
                  <path fill-rule="evenodd" d="M6 3.5a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-8a.5.5 
                  0 0 1-.5-.5v-2a.5.5 0 0 0-1 0v2A1.5 1.5 0 0 0 6.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 
                  2h-8A1.5 1.5 0 0 0 5 3.5v2a.5.5 0 0 0 1 0v-2z"/>
                  <path fill-rule="evenodd" d="M11.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 
                  7.5H1.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z"/>
                </svg>
            </a>"""
        )

    @admin.action(description="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
    def activate_devices(self, request, queryset):
        queryset.update(active=True)

    @admin.action(description="üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
    def deactivate_devices(self, request, queryset):
        queryset.update(active=False)

    @admin.action(description="üîì telnet –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")
    def set_telnet_port_scan_protocol(self, request, queryset):
        queryset.update(port_scan_protocol="telnet")

    @admin.action(description="üîé snmp –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")
    def set_snmp_port_scan_protocol(self, request, queryset):
        queryset.update(port_scan_protocol="snmp")

    @admin.action(description="üîê ssh –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")
    def set_ssh_port_scan_protocol(self, request, queryset):
        queryset.update(port_scan_protocol="ssh")

    @admin.action(description="üîì telnet –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    def set_telnet_cmd_protocol(self, request, queryset):
        queryset.update(cmd_protocol="telnet")

    @admin.action(description="üîê ssh –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    def set_ssh_cmd_protocol(self, request, queryset):
        queryset.update(cmd_protocol="ssh")

    @admin.action(description="üì∂ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ 1")
    def set_pool_size_1(self, request, queryset):
        queryset.update(connection_pool_size=1)

    @admin.action(description="üì∂ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ 2")
    def set_pool_size_2(self, request, queryset):
        queryset.update(connection_pool_size=3)

    @admin.action(description="üì∂ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ 3")
    def set_pool_size_3(self, request, queryset):
        queryset.update(connection_pool_size=3)

    @admin.action(description="üì∂ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ 4")
    def set_pool_size_4(self, request, queryset):
        queryset.update(connection_pool_size=4)

    @admin.action(description="üìä –≠–∫—Å–ø–æ—Ä—Ç —ë–º–∫–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –≤ xls")
    def excel_interfaces_export(self, request, queryset):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ë–º–∫–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –≤ excel —Ñ–∞–π–ª"""
        export = DevicesInterfacesWorkloadExcelExport(queryset)
        export.make_excel()
        return export.create_response()

    @admin.action(description="üì¶ –°–∫–∞—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ZIP")
    def load_last_config_files(self, request, queryset: QuerySet[Devices]):
        """
        –§—É–Ω–∫—Ü–∏—è `load_last_config_files` —Å–æ–∑–¥–∞–µ—Ç zip-—Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤
        –∑–∞–¥–∞–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ –∑–∞–ø—Ä–æ—Å–æ–≤, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–∞–∫ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç.

        :return: –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç HttpResponse —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º zip-—Ñ–∞–π–ª–æ–º.
        """
        config_files_path_list = []
        for device in queryset:
            storage = LocalConfigStorage(device)
            configs = storage.files_list()
            if configs:
                config_files_path_list.append(configs[0].path)

        archive_storage_dir = settings.CONFIG_STORAGE_DIR / "archives"
        archive_storage_dir.mkdir(parents=True, exist_ok=True)

        datetime_part = datetime.now().strftime("%d %b %Y %Hh %Mm")

        zip_file_path = archive_storage_dir / f"devices_({len(config_files_path_list)})_{datetime_part}.zip"

        with zipfile.ZipFile(zip_file_path, "w") as my_zip:
            for file in config_files_path_list:
                if isinstance(file, str):
                    file_path = file
                else:
                    file_path = str(file.absolute().as_posix())

                file_name_with_parent_folder = file_path.split("/")[-2:]
                my_zip.write(filename=file, arcname="/".join(file_name_with_parent_folder))

        response = HttpResponse(zip_file_path.open("rb"), content_type="application/x-zip-compressed")
        response["Content-Disposition"] = f"attachment; filename={zip_file_path.name}"
        zip_file_path.unlink()
        return response


@admin.register(AuthGroup)
class AuthGroupAdmin(admin.ModelAdmin):
    """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é"""

    list_display = ["name", "login", "description", "dev_count"]
    search_fields = ["name", "login"]

    def get_queryset(self, request):
        return super().get_queryset(request).annotate(dev_count=Count("devices"))

    @admin.display(description="–ö–æ–ª-–≤–æ")
    def dev_count(self, obj) -> int:
        return obj.dev_count


@admin.register(Bras)
class BrasAdmin(admin.ModelAdmin):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤ —à–∏—Ä–æ–∫–æ–ø–æ–ª–æ—Å–Ω–æ–≥–æ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ BRAS"""

    list_display = ["name", "ip"]
    search_fields = ["name", "ip"]


@admin.register(Profile)
class ProfileAdmin(admin.ModelAdmin):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–º –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    list_display = ["user", "permissions", "dev_groups", "console_access"]
    list_select_related = ["user"]
    filter_horizontal = ["devices_groups"]

    @admin.display(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    def user(self, obj: Profile):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return obj.user.username

    def get_queryset(self, request):
        return super().get_queryset(request).prefetch_related("devices_groups")

    @admin.display(description="–ì—Ä—É–ø–ø—ã")
    def dev_groups(self, obj: Profile):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_groups = obj.devices_groups.all()
        groups_string = "".join([f"<li>{group.name}</li>" for group in user_groups])
        return mark_safe(groups_string)


admin.site.unregister(User)  # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∞–¥–º–∏–Ω–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@admin.register(User)
class UserProfileAdmin(UserAdmin):
    """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    list_display = [
        "username",
        "verbose_name",
        "email",
        "is_active",
        "last_login",
        "permission",
        "dev_groups",
    ]

    @admin.display(description="")
    def verbose_name(self, obj: User):
        return f"{obj.first_name} {obj.last_name}"

    @admin.display(description="–ü—Ä–∞–≤–∞")
    def permission(self, obj: User):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return Profile.objects.get(user_id=obj.pk).permissions

    @admin.display(description="–ì—Ä—É–ø–ø—ã")
    def dev_groups(self, obj: User):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            profile: Profile = Profile.objects.get(user=obj)
        except Profile.DoesNotExist:
            return ""

        user_groups = profile.devices_groups.all()
        groups_string = "".join([f"<li>{group}</li>" for group in user_groups])
        return mark_safe(groups_string)


@admin.register(UsersActions)
class UsersActionsAdmin(admin.ModelAdmin):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    list_display = ["time", "user", "device", "action"]
    list_filter = ["user"]
    search_fields = ["action"]
    date_hierarchy = "time"
    readonly_fields = ["time", "user", "device", "action"]
    list_per_page = 50
    list_select_related = ["device", "user"]


@admin.register(DeviceMedia)
class DeviceMediaAdmin(admin.ModelAdmin):
    list_display = ["file_type", "file_name", "current_file"]
    search_fields = ["device__name"]
    list_select_related = ["device"]

    fieldsets = (
        (
            None,
            {"fields": ("description", "device", "file", "current_file")},
        ),
    )

    readonly_fields = ["current_file"]

    @admin.display(description="–¢–∏–ø")
    def file_type(self, obj: DeviceMedia) -> str:
        if obj.is_image:
            type_ = "image"
        else:
            type_ = obj.file_type
        return mark_safe(
            f'<i class="nav-icon fas fa-file-{type_}" style="font-size: 2rem; vertical-align: middle;"></i> {type_}'
        )

    @admin.display(description="–ò–º—è —Ñ–∞–π–ª–∞")
    def file_name(self, obj: DeviceMedia) -> str:
        return obj.file.name

    @staticmethod
    def current_file(obj: DeviceMedia) -> str:
        if obj.is_image:
            return mark_safe(f'<img src="{obj.file.url}" style="max-height: 300px;" >')

        if obj.file_type == "pdf":
            return mark_safe(
                f"""<a href="{obj.file.url}"><svg xmlns="http://www.w3.org/2000/svg" width="80" height="80" 
                fill="currentColor" class="bi bi-file-earmark-pdf" viewBox="0 0 16 16">
                      <path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 
                      3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"/>
                      <path d="M4.603 14.087a.81.81 0 0 
                      1-.438-.42c-.195-.388-.13-.776.08-1.102.198-.307.526-.568.897-.787a7.68 7.68 0 0 1 1.482-.645
                       19.697 19.697 0 0 0 1.062-2.227 7.269 7.269 0 0 
                       1-.43-1.295c-.086-.4-.119-.796-.046-1.136.075-.354.274-.672.65-.823.192-.077.4-.12.602-.077a.7.7 
                       0 0 1 .477.365c.088.164.12.356.127.538.007.188-.012.396-.047.614-.084.51-.27 1.134-.52 
                       1.794a10.954 10.954 0 0 0 .98 1.686 5.753 5.753 0 0 1 
                       1.334.05c.364.066.734.195.96.465.12.144.193.32.2.518.007.192-.047.382-.138.563a1.04 1.04 0 0 
                       1-.354.416.856.856 0 0 1-.51.138c-.331-.014-.654-.196-.933-.417a5.712 5.712 0 0 1-.911-.95 
                       11.651 11.651 0 0 0-1.997.406 11.307 11.307 0 0 1-1.02 1.51c-.292.35-.609.656-.927.787a.793.793 
                       0 0 1-.58.029zm1.379-1.901c-.166.076-.32.156-.459.238-.328.194-.541.383-.647.547-
                       .094.145-.096.25-.04.361.01.022.02.036.026.044a.266.266 0 0 0 .035-.012c.137-.056.355-
                       .235.635-.572a8.18 8.18 0 0 0 .45-.606zm1.64-1.33a12.71 12.71 0 0 1 1.01-.193 11.744 
                       11.744 0 0 1-.51-.858 20.801 20.801 0 0 1-.5 1.05zm2.446.45c.15.163.296.3.435.41.24.19.407
                       .253.498.256a.107.107 0 0 0 .07-.015.307.307 0 0 0 .094-.125.436.436 0 0 0 .059-.2.095.095 
                       0 0 0-.026-.063c-.052-.062-.2-.152-.518-.209a3.876 3.876 0 0 0-.612-.053zM8.078 7.8a6.7 6.7 
                       0 0 0 .2-.828c.031-.188.043-.343.038-.465a.613.613 0 0 0-.032-.198.517.517 0 0 0-.145.04c
                       -.087.035-.158.106-.196.283-.04.192-.03.469.046.822.024.111.054.227.09.346z"/>
                    </svg></a>"""
            )

        return ""


class DeviceCommandModelForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        uniq_vendors = list(sorted(set(Devices.objects.all().values_list("vendor", flat=True)), key=str))
        self.fields["device_vendor"] = forms.ChoiceField(
            choices=[(v, v) for v in uniq_vendors], required=True
        )

    class Meta:
        model = DeviceCommand
        fields = [
            "name",
            "description",
            "command",
            "device_vendor",
            "model_regexp",
            "perm_groups",
        ]
        widgets = {
            "command": forms.Textarea(
                attrs={
                    "style": "font-family: monospace; "
                    "font-size: 1rem; "
                    "padding: 1rem; "
                    "min-width: 100%;",
                    "wrap": "off",
                },
            ),
        }


@admin.register(DeviceCommand)
class DeviceCommandAdmin(admin.ModelAdmin):
    list_display = ["name", "device_vendor", "model_regexp", "command_html", "description"]
    search_fields = ["name", "command"]
    filter_horizontal = ("perm_groups",)
    form = DeviceCommandModelForm
    list_filter = ["device_vendor"]

    @admin.display(description="–ö–æ–º–∞–Ω–¥–∞", ordering="command")
    def command_html(self, obj):
        cmd_text = escape(obj.command).replace("\n", "<br/>")
        return mark_safe(f'<code style="font-family: monospace;">{cmd_text}</code>')
